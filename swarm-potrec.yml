version: "3.3"

services:

  traefik:
    image: "traefik:latest"
    command:
      - --api
      - --log.level=ERROR
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      #- --entrypoints.tcp-ingress.address=:1961
      #- --entrypoints.udp-ingress.address=:1994
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=traefik-public
      - --serversTransport.insecureSkipVerify=true
      # Redirect http to https
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      # Main TLS Resolver
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_USER_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      # Wildcard Resolver
      - --certificatesresolvers.wildcard.acme.email=${ACME_USER_EMAIL}
      - --certificatesresolvers.wildcard.acme.dnschallenge.provider=${DNS_PROVIDER}
      - --certificatesresolvers.wildcard.acme.storage=/acme/wildcard/acme.json
      - --certificatesresolvers.wildcard.acme.dnschallenge=true
      # Metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --metrics.prometheus.addEntryPointsLabels=true # Default true
      - --metrics.prometheus.addrouterslabels=true # Dafault false
      - --metrics.prometheus.addServicesLabels=true # Default true
    environment:
      ${DNS_API_PROVIDER}: ${DNS_API_KEY}
    ports:
      - 80:80
      - 443:443
      #- 1961:1961/tcp
      #- 1994:1994/udp
    networks:
      - traefik-public
      - metrics-net
    volumes:
      - ./acme/letsencrypt:/acme/letsencrypt
      - ./acme/wildcard:/acme/wildcard
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - ${NODE_PLACEMENT}
      labels:
        traefik.enable: "true"
        traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto: https
        traefik.http.routers.traefik.entrypoints: websecure
        traefik.http.routers.traefik.tls.certresolver: wildcard
        traefik.http.routers.traefik.tls.domains[0].main: ${WILDCARD_MAIN_DOMAIN}
        traefik.http.routers.traefik.tls.domains[0].sans: ${WILDCARD_SANS_DOMAIN}
        traefik.http.routers.traefik.rule: Host(`${TRAEFIK_DOMAIN}`)
        traefik.http.routers.traefik.service: api@internal
        traefik.http.routers.traefik.middlewares: basic-auth
        traefik.http.middlewares.basic-auth.basicauth.users: ${TRAEFIK_BASICAUTH_USERS}
        # Per Doco:"Dummy service for Swarm port detection. The port can be any valid integer value."
        traefik.http.services.dummy-svc.loadbalancer.server.port: 9999


  agent:
    image: portainer/agent:latest
    environment:
      # Per Doco:"Should be equal to the service name prefixed by "tasks." when deployed inside an overlay network"
      AGENT_CLUSTER_ADDR: tasks.agent
      # AGENT_PORT: 9001
      # LOG_LEVEL: debug
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
      mode: global
      placement:
        constraints: 
          - node.platform.os == linux


  portainer:
    image: portainer/portainer-ce:latest
    command: -H tcp://tasks.agent:9001 --tlsskipverify --http-disabled
    volumes:
      - ./portainer_data:/data
    networks:
      - traefik-public
      - agent_network
      - metrics-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
      mode: replicated
      replicas: 1
      placement:
        constraints: 
          - ${NODE_PLACEMENT}
      labels:
        traefik.enable: "true"
        traefik.http.routers.portainer.rule: Host(`${PORTAINER_DOMAIN}`)
        traefik.http.routers.portainer.entrypoints: websecure
        traefik.http.services.portainer.loadbalancer.server.port: 9443
        traefik.http.services.portainer.loadbalancer.server.scheme: https
        traefik.http.routers.portainer.service: portainer
        traefik.http.routers.portainer.tls.certresolver: letsencrypt
        # Edge
        traefik.http.routers.edge.rule: Host(`${EDGE_DOMAIN}`)
        traefik.http.routers.edge.entrypoints: web
        traefik.http.services.edge.loadbalancer.server.port: 8000
        traefik.http.routers.edge.service: edge


# Metrics related containers SECTION-START
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus_data:/prometheus
    user: 1000:1000
    command:
      - "--config.file=/prometheus/prometheus-conf.yml"
    networks:
      - metrics-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
      mode: replicated
      replicas: 1
      placement:
        constraints: 
          - ${NODE_PLACEMENT}
      labels:
        traefik.enable: "true"
        traefik.http.routers.prometheus.rule: Host(`${PROMETHEUS_DOMAIN}`)
        traefik.http.routers.prometheus.service: prometheus
        traefik.http.routers.prometheus.entrypoints: websecure
        traefik.http.services.prometheus.loadbalancer.server.port: 9090
        traefik.http.routers.prometheus.middlewares: basic-auth
        traefik.http.middlewares.basic-auth.basicauth.users: ${TRAEFIK_BASICAUTH_USERS}


  grafana:
    image: grafana/grafana-oss:latest
    volumes:
      - ./grafana_data:/var/lib/grafana
    user: 1000:1000
    networks:
      - metrics-net
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
        window: 60s
      mode: replicated
      replicas: 1
      placement:
        constraints: 
          - ${NODE_PLACEMENT}
      labels:
        traefik.enable: "true"
        traefik.http.routers.grafana.rule: Host(`${GRAFANA_DOMAIN}`)
        traefik.http.routers.grafana.service: grafana
        traefik.http.routers.grafana.entrypoints: websecure
        traefik.http.services.grafana.loadbalancer.server.port: 3000


  node-exporter:
    image: flaviostutz/docker-swarm-node-exporter
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    networks:
      - metrics-net
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M


  cadvisor:
    # manually set latest release https://github.com/google/cadvisor/releases 
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    # UI port not needed atm but keeping for reference
    #ports:
    #  - "8080:8080"
    networks:
      - metrics-net
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    deploy:
      mode: global
# Metrics related containers SECTION-END


networks:
  traefik-public:
    #driver: overlay
    external: true
  agent_network:
    #driver: overlay
    external: true
  metrics-net: